#!/usr/bin/env node

const app = require('../app');
const config = require('../config');
const db = require('../models');
const debug = require('debug')('sourceadmin:server');
const http = require('http');

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

const port = normalizePort(config.webserver.port || '3000');

app.set('port', port);

const server = http.createServer(app);

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  switch (error.code) {
    case 'EACCES': {
      console.error(`${bind} requires elevated privileges`);

      process.exit(1);

      break;
    }
    case 'EADDRINUSE': {
      console.error(`${bind} is already in use`);

      process.exit(1);

      break;
    }
    default: {
      throw error;
    }
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;

  debug(`Listening on ${bind}`);
}

db.sequelize.sync().then(() => {
  server.listen(port, () => {
    debug(`Express server listening on port ${server.address().port}`);
  });

  server.on('error', onError);
  server.on('listening', onListening);
});
